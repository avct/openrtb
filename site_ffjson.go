// DO NOT EDIT!
// Code generated by ffjson <https://github.com/pquerna/ffjson>
// source: site.go
// DO NOT EDIT!

package openrtb

import (
	"bytes"
	"encoding/json"
	"fmt"
	fflib "github.com/pquerna/ffjson/fflib/v1"
)

func (mj *Site) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	err := mj.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}
func (mj *Site) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{ `)
	if mj.Id != nil {
		if true {
			buf.WriteString(`"id":`)
			fflib.WriteJsonString(buf, string(*mj.Id))
			buf.WriteByte(',')
		}
	}
	if mj.Name != nil {
		if true {
			buf.WriteString(`"name":`)
			fflib.WriteJsonString(buf, string(*mj.Name))
			buf.WriteByte(',')
		}
	}
	if mj.Domain != nil {
		if true {
			buf.WriteString(`"domain":`)
			fflib.WriteJsonString(buf, string(*mj.Domain))
			buf.WriteByte(',')
		}
	}
	if len(mj.Cat) != 0 {
		buf.WriteString(`"cat":`)
		if mj.Cat != nil {
			buf.WriteString(`[`)
			for i, v := range mj.Cat {
				if i != 0 {
					buf.WriteString(`,`)
				}
				fflib.WriteJsonString(buf, string(v))
			}
			buf.WriteString(`]`)
		} else {
			buf.WriteString(`null`)
		}
		buf.WriteByte(',')
	}
	if len(mj.Sectioncat) != 0 {
		buf.WriteString(`"sectioncat":`)
		if mj.Sectioncat != nil {
			buf.WriteString(`[`)
			for i, v := range mj.Sectioncat {
				if i != 0 {
					buf.WriteString(`,`)
				}
				fflib.WriteJsonString(buf, string(v))
			}
			buf.WriteString(`]`)
		} else {
			buf.WriteString(`null`)
		}
		buf.WriteByte(',')
	}
	if len(mj.Pagecat) != 0 {
		buf.WriteString(`"pagecat":`)
		if mj.Pagecat != nil {
			buf.WriteString(`[`)
			for i, v := range mj.Pagecat {
				if i != 0 {
					buf.WriteString(`,`)
				}
				fflib.WriteJsonString(buf, string(v))
			}
			buf.WriteString(`]`)
		} else {
			buf.WriteString(`null`)
		}
		buf.WriteByte(',')
	}
	if mj.Page != nil {
		if true {
			buf.WriteString(`"page":`)
			fflib.WriteJsonString(buf, string(*mj.Page))
			buf.WriteByte(',')
		}
	}
	if mj.Privacypolicy != nil {
		if true {
			buf.WriteString(`"privacypolicy":`)
			fflib.FormatBits2(buf, uint64(*mj.Privacypolicy), 10, *mj.Privacypolicy < 0)
			buf.WriteByte(',')
		}
	}
	if mj.Ref != nil {
		if true {
			buf.WriteString(`"ref":`)
			fflib.WriteJsonString(buf, string(*mj.Ref))
			buf.WriteByte(',')
		}
	}
	if mj.Search != nil {
		if true {
			buf.WriteString(`"search":`)
			fflib.WriteJsonString(buf, string(*mj.Search))
			buf.WriteByte(',')
		}
	}
	if mj.Mobile != nil {
		if true {
			buf.WriteString(`"mobile":`)
			fflib.FormatBits2(buf, uint64(*mj.Mobile), 10, *mj.Mobile < 0)
			buf.WriteByte(',')
		}
	}
	if mj.Publisher != nil {
		if true {
			/* Struct fall back. type=openrtb.Publisher kind=struct */
			buf.WriteString(`"publisher":`)
			err = buf.Encode(mj.Publisher)
			if err != nil {
				return err
			}
			buf.WriteByte(',')
		}
	}
	if mj.Keywords != nil {
		if true {
			buf.WriteString(`"keywords":`)
			fflib.WriteJsonString(buf, string(*mj.Keywords))
			buf.WriteByte(',')
		}
	}
	if len(mj.Ext) != 0 {
		buf.WriteString(`"ext":`)
		/* Falling back. type=openrtb.Extensions kind=map */
		err = buf.Encode(mj.Ext)
		if err != nil {
			return err
		}
		buf.WriteByte(',')
	}
	buf.Rewind(1)
	buf.WriteByte('}')
	return nil
}

const (
	ffj_t_Sitebase = iota
	ffj_t_Siteno_such_key

	ffj_t_Site_Id

	ffj_t_Site_Name

	ffj_t_Site_Domain

	ffj_t_Site_Cat

	ffj_t_Site_Sectioncat

	ffj_t_Site_Pagecat

	ffj_t_Site_Page

	ffj_t_Site_Privacypolicy

	ffj_t_Site_Ref

	ffj_t_Site_Search

	ffj_t_Site_Mobile

	ffj_t_Site_Publisher

	ffj_t_Site_Keywords

	ffj_t_Site_Ext
)

var ffj_key_Site_Id = []byte("id")

var ffj_key_Site_Name = []byte("name")

var ffj_key_Site_Domain = []byte("domain")

var ffj_key_Site_Cat = []byte("cat")

var ffj_key_Site_Sectioncat = []byte("sectioncat")

var ffj_key_Site_Pagecat = []byte("pagecat")

var ffj_key_Site_Page = []byte("page")

var ffj_key_Site_Privacypolicy = []byte("privacypolicy")

var ffj_key_Site_Ref = []byte("ref")

var ffj_key_Site_Search = []byte("search")

var ffj_key_Site_Mobile = []byte("mobile")

var ffj_key_Site_Publisher = []byte("publisher")

var ffj_key_Site_Keywords = []byte("keywords")

var ffj_key_Site_Ext = []byte("ext")

func (uj *Site) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return uj.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

func (uj *Site) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error = nil
	currentKey := ffj_t_Sitebase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffj_t_Siteno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'c':

					if bytes.Equal(ffj_key_Site_Cat, kn) {
						currentKey = ffj_t_Site_Cat
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'd':

					if bytes.Equal(ffj_key_Site_Domain, kn) {
						currentKey = ffj_t_Site_Domain
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'e':

					if bytes.Equal(ffj_key_Site_Ext, kn) {
						currentKey = ffj_t_Site_Ext
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'i':

					if bytes.Equal(ffj_key_Site_Id, kn) {
						currentKey = ffj_t_Site_Id
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'k':

					if bytes.Equal(ffj_key_Site_Keywords, kn) {
						currentKey = ffj_t_Site_Keywords
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'm':

					if bytes.Equal(ffj_key_Site_Mobile, kn) {
						currentKey = ffj_t_Site_Mobile
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'n':

					if bytes.Equal(ffj_key_Site_Name, kn) {
						currentKey = ffj_t_Site_Name
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'p':

					if bytes.Equal(ffj_key_Site_Pagecat, kn) {
						currentKey = ffj_t_Site_Pagecat
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Site_Page, kn) {
						currentKey = ffj_t_Site_Page
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Site_Privacypolicy, kn) {
						currentKey = ffj_t_Site_Privacypolicy
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Site_Publisher, kn) {
						currentKey = ffj_t_Site_Publisher
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'r':

					if bytes.Equal(ffj_key_Site_Ref, kn) {
						currentKey = ffj_t_Site_Ref
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 's':

					if bytes.Equal(ffj_key_Site_Sectioncat, kn) {
						currentKey = ffj_t_Site_Sectioncat
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Site_Search, kn) {
						currentKey = ffj_t_Site_Search
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.SimpleLetterEqualFold(ffj_key_Site_Ext, kn) {
					currentKey = ffj_t_Site_Ext
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_Site_Keywords, kn) {
					currentKey = ffj_t_Site_Keywords
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_Site_Publisher, kn) {
					currentKey = ffj_t_Site_Publisher
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_Site_Mobile, kn) {
					currentKey = ffj_t_Site_Mobile
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_Site_Search, kn) {
					currentKey = ffj_t_Site_Search
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_Site_Ref, kn) {
					currentKey = ffj_t_Site_Ref
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_Site_Privacypolicy, kn) {
					currentKey = ffj_t_Site_Privacypolicy
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_Site_Page, kn) {
					currentKey = ffj_t_Site_Page
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_Site_Pagecat, kn) {
					currentKey = ffj_t_Site_Pagecat
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_Site_Sectioncat, kn) {
					currentKey = ffj_t_Site_Sectioncat
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_Site_Cat, kn) {
					currentKey = ffj_t_Site_Cat
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_Site_Domain, kn) {
					currentKey = ffj_t_Site_Domain
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_Site_Name, kn) {
					currentKey = ffj_t_Site_Name
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_Site_Id, kn) {
					currentKey = ffj_t_Site_Id
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffj_t_Siteno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffj_t_Site_Id:
					goto handle_Id

				case ffj_t_Site_Name:
					goto handle_Name

				case ffj_t_Site_Domain:
					goto handle_Domain

				case ffj_t_Site_Cat:
					goto handle_Cat

				case ffj_t_Site_Sectioncat:
					goto handle_Sectioncat

				case ffj_t_Site_Pagecat:
					goto handle_Pagecat

				case ffj_t_Site_Page:
					goto handle_Page

				case ffj_t_Site_Privacypolicy:
					goto handle_Privacypolicy

				case ffj_t_Site_Ref:
					goto handle_Ref

				case ffj_t_Site_Search:
					goto handle_Search

				case ffj_t_Site_Mobile:
					goto handle_Mobile

				case ffj_t_Site_Publisher:
					goto handle_Publisher

				case ffj_t_Site_Keywords:
					goto handle_Keywords

				case ffj_t_Site_Ext:
					goto handle_Ext

				case ffj_t_Siteno_such_key:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_Id:

	/* handler: uj.Id type=string kind=string */

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

			uj.Id = nil

		} else {

			var tval string
			tval = string(fs.Output.String())
			uj.Id = &tval

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Name:

	/* handler: uj.Name type=string kind=string */

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

			uj.Name = nil

		} else {

			var tval string
			tval = string(fs.Output.String())
			uj.Name = &tval

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Domain:

	/* handler: uj.Domain type=string kind=string */

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

			uj.Domain = nil

		} else {

			var tval string
			tval = string(fs.Output.String())
			uj.Domain = &tval

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Cat:

	/* handler: uj.Cat type=[]string kind=slice */

	{

		{
			if tok != fflib.FFTok_left_brace && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for ", tok))
			}
		}

		if tok == fflib.FFTok_null {
			uj.Cat = nil
		} else {

			uj.Cat = make([]string, 0)

			wantVal := true

			for {

				var v string

				tok = fs.Scan()
				if tok == fflib.FFTok_error {
					goto tokerror
				}
				if tok == fflib.FFTok_right_brace {
					break
				}

				if tok == fflib.FFTok_comma {
					if wantVal == true {
						// TODO(pquerna): this isn't an ideal error message, this handles
						// things like [,,,] as an array value.
						return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
					}
					continue
				} else {
					wantVal = true
				}

				/* handler: v type=string kind=string */

				{

					{
						if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
							return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
						}
					}

					if tok == fflib.FFTok_null {

					} else {

						v = string(fs.Output.String())

					}
				}

				uj.Cat = append(uj.Cat, v)
				wantVal = false
			}
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Sectioncat:

	/* handler: uj.Sectioncat type=[]string kind=slice */

	{

		{
			if tok != fflib.FFTok_left_brace && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for ", tok))
			}
		}

		if tok == fflib.FFTok_null {
			uj.Sectioncat = nil
		} else {

			uj.Sectioncat = make([]string, 0)

			wantVal := true

			for {

				var v string

				tok = fs.Scan()
				if tok == fflib.FFTok_error {
					goto tokerror
				}
				if tok == fflib.FFTok_right_brace {
					break
				}

				if tok == fflib.FFTok_comma {
					if wantVal == true {
						// TODO(pquerna): this isn't an ideal error message, this handles
						// things like [,,,] as an array value.
						return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
					}
					continue
				} else {
					wantVal = true
				}

				/* handler: v type=string kind=string */

				{

					{
						if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
							return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
						}
					}

					if tok == fflib.FFTok_null {

					} else {

						v = string(fs.Output.String())

					}
				}

				uj.Sectioncat = append(uj.Sectioncat, v)
				wantVal = false
			}
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Pagecat:

	/* handler: uj.Pagecat type=[]string kind=slice */

	{

		{
			if tok != fflib.FFTok_left_brace && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for ", tok))
			}
		}

		if tok == fflib.FFTok_null {
			uj.Pagecat = nil
		} else {

			uj.Pagecat = make([]string, 0)

			wantVal := true

			for {

				var v string

				tok = fs.Scan()
				if tok == fflib.FFTok_error {
					goto tokerror
				}
				if tok == fflib.FFTok_right_brace {
					break
				}

				if tok == fflib.FFTok_comma {
					if wantVal == true {
						// TODO(pquerna): this isn't an ideal error message, this handles
						// things like [,,,] as an array value.
						return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
					}
					continue
				} else {
					wantVal = true
				}

				/* handler: v type=string kind=string */

				{

					{
						if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
							return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
						}
					}

					if tok == fflib.FFTok_null {

					} else {

						v = string(fs.Output.String())

					}
				}

				uj.Pagecat = append(uj.Pagecat, v)
				wantVal = false
			}
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Page:

	/* handler: uj.Page type=string kind=string */

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

			uj.Page = nil

		} else {

			var tval string
			tval = string(fs.Output.String())
			uj.Page = &tval

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Privacypolicy:

	/* handler: uj.Privacypolicy type=int kind=int */

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

			uj.Privacypolicy = nil

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			ttypval := int(tval)
			uj.Privacypolicy = &ttypval

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Ref:

	/* handler: uj.Ref type=string kind=string */

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

			uj.Ref = nil

		} else {

			var tval string
			tval = string(fs.Output.String())
			uj.Ref = &tval

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Search:

	/* handler: uj.Search type=string kind=string */

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

			uj.Search = nil

		} else {

			var tval string
			tval = string(fs.Output.String())
			uj.Search = &tval

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Mobile:

	/* handler: uj.Mobile type=int kind=int */

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

			uj.Mobile = nil

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			ttypval := int(tval)
			uj.Mobile = &ttypval

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Publisher:

	/* handler: uj.Publisher type=openrtb.Publisher kind=struct */

	{
		/* Falling back. type=openrtb.Publisher kind=struct */
		tbuf, err := fs.CaptureField(tok)
		if err != nil {
			return fs.WrapErr(err)
		}

		err = json.Unmarshal(tbuf, &uj.Publisher)
		if err != nil {
			return fs.WrapErr(err)
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Keywords:

	/* handler: uj.Keywords type=string kind=string */

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

			uj.Keywords = nil

		} else {

			var tval string
			tval = string(fs.Output.String())
			uj.Keywords = &tval

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Ext:

	/* handler: uj.Ext type=openrtb.Extensions kind=map */

	{
		/* Falling back. type=openrtb.Extensions kind=map */
		tbuf, err := fs.CaptureField(tok)
		if err != nil {
			return fs.WrapErr(err)
		}

		err = json.Unmarshal(tbuf, &uj.Ext)
		if err != nil {
			return fs.WrapErr(err)
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:
	return nil
}
