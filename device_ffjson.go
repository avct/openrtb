// DO NOT EDIT!
// Code generated by ffjson <https://github.com/pquerna/ffjson>
// source: device.go
// DO NOT EDIT!

package openrtb

import (
	"bytes"
	"encoding/json"
	"fmt"
	fflib "github.com/pquerna/ffjson/fflib/v1"
)

func (mj *Device) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	err := mj.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}
func (mj *Device) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{ `)
	if mj.Dnt != nil {
		if true {
			buf.WriteString(`"dnt":`)
			fflib.FormatBits2(buf, uint64(*mj.Dnt), 10, *mj.Dnt < 0)
			buf.WriteByte(',')
		}
	}
	if mj.Ua != nil {
		if true {
			buf.WriteString(`"ua":`)
			fflib.WriteJsonString(buf, string(*mj.Ua))
			buf.WriteByte(',')
		}
	}
	if mj.Ip != nil {
		if true {
			buf.WriteString(`"ip":`)
			fflib.WriteJsonString(buf, string(*mj.Ip))
			buf.WriteByte(',')
		}
	}
	if mj.Geo != nil {
		if true {
			/* Struct fall back. type=openrtb.Geo kind=struct */
			buf.WriteString(`"geo":`)
			err = buf.Encode(mj.Geo)
			if err != nil {
				return err
			}
			buf.WriteByte(',')
		}
	}
	if mj.Didsha1 != nil {
		if true {
			buf.WriteString(`"didsha1":`)
			fflib.WriteJsonString(buf, string(*mj.Didsha1))
			buf.WriteByte(',')
		}
	}
	if mj.Didmd5 != nil {
		if true {
			buf.WriteString(`"didmd5":`)
			fflib.WriteJsonString(buf, string(*mj.Didmd5))
			buf.WriteByte(',')
		}
	}
	if mj.Dpidsha1 != nil {
		if true {
			buf.WriteString(`"dpidsha1":`)
			fflib.WriteJsonString(buf, string(*mj.Dpidsha1))
			buf.WriteByte(',')
		}
	}
	if mj.Dpidmd5 != nil {
		if true {
			buf.WriteString(`"dpidmd5":`)
			fflib.WriteJsonString(buf, string(*mj.Dpidmd5))
			buf.WriteByte(',')
		}
	}
	if mj.Macsha1 != nil {
		if true {
			buf.WriteString(`"macsha1":`)
			fflib.WriteJsonString(buf, string(*mj.Macsha1))
			buf.WriteByte(',')
		}
	}
	if mj.Macmd5 != nil {
		if true {
			buf.WriteString(`"macmd5":`)
			fflib.WriteJsonString(buf, string(*mj.Macmd5))
			buf.WriteByte(',')
		}
	}
	if mj.Ipv6 != nil {
		if true {
			buf.WriteString(`"ipv6":`)
			fflib.WriteJsonString(buf, string(*mj.Ipv6))
			buf.WriteByte(',')
		}
	}
	if mj.Carrier != nil {
		if true {
			buf.WriteString(`"carrier":`)
			fflib.WriteJsonString(buf, string(*mj.Carrier))
			buf.WriteByte(',')
		}
	}
	if mj.Language != nil {
		if true {
			buf.WriteString(`"language":`)
			fflib.WriteJsonString(buf, string(*mj.Language))
			buf.WriteByte(',')
		}
	}
	if mj.Make != nil {
		if true {
			buf.WriteString(`"make":`)
			fflib.WriteJsonString(buf, string(*mj.Make))
			buf.WriteByte(',')
		}
	}
	if mj.Model != nil {
		if true {
			buf.WriteString(`"model":`)
			fflib.WriteJsonString(buf, string(*mj.Model))
			buf.WriteByte(',')
		}
	}
	if mj.Os != nil {
		if true {
			buf.WriteString(`"os":`)
			fflib.WriteJsonString(buf, string(*mj.Os))
			buf.WriteByte(',')
		}
	}
	if mj.Osv != nil {
		if true {
			buf.WriteString(`"osv":`)
			fflib.WriteJsonString(buf, string(*mj.Osv))
			buf.WriteByte(',')
		}
	}
	if mj.Js != nil {
		if true {
			buf.WriteString(`"js":`)
			fflib.FormatBits2(buf, uint64(*mj.Js), 10, *mj.Js < 0)
			buf.WriteByte(',')
		}
	}
	if mj.Connectiontype != nil {
		if true {
			buf.WriteString(`"connectiontype":`)
			fflib.FormatBits2(buf, uint64(*mj.Connectiontype), 10, *mj.Connectiontype < 0)
			buf.WriteByte(',')
		}
	}
	if mj.Devicetype != nil {
		if true {
			buf.WriteString(`"devicetype":`)
			fflib.FormatBits2(buf, uint64(*mj.Devicetype), 10, *mj.Devicetype < 0)
			buf.WriteByte(',')
		}
	}
	if mj.Flashver != nil {
		if true {
			buf.WriteString(`"flashver":`)
			fflib.WriteJsonString(buf, string(*mj.Flashver))
			buf.WriteByte(',')
		}
	}
	if mj.Ifa != nil {
		if true {
			buf.WriteString(`"ifa":`)
			fflib.WriteJsonString(buf, string(*mj.Ifa))
			buf.WriteByte(',')
		}
	}
	if len(mj.Ext) != 0 {
		buf.WriteString(`"ext":`)
		/* Falling back. type=openrtb.Extensions kind=map */
		err = buf.Encode(mj.Ext)
		if err != nil {
			return err
		}
		buf.WriteByte(',')
	}
	buf.Rewind(1)
	buf.WriteByte('}')
	return nil
}

const (
	ffj_t_Devicebase = iota
	ffj_t_Deviceno_such_key

	ffj_t_Device_Dnt

	ffj_t_Device_Ua

	ffj_t_Device_Ip

	ffj_t_Device_Geo

	ffj_t_Device_Didsha1

	ffj_t_Device_Didmd5

	ffj_t_Device_Dpidsha1

	ffj_t_Device_Dpidmd5

	ffj_t_Device_Macsha1

	ffj_t_Device_Macmd5

	ffj_t_Device_Ipv6

	ffj_t_Device_Carrier

	ffj_t_Device_Language

	ffj_t_Device_Make

	ffj_t_Device_Model

	ffj_t_Device_Os

	ffj_t_Device_Osv

	ffj_t_Device_Js

	ffj_t_Device_Connectiontype

	ffj_t_Device_Devicetype

	ffj_t_Device_Flashver

	ffj_t_Device_Ifa

	ffj_t_Device_Ext
)

var ffj_key_Device_Dnt = []byte("dnt")

var ffj_key_Device_Ua = []byte("ua")

var ffj_key_Device_Ip = []byte("ip")

var ffj_key_Device_Geo = []byte("geo")

var ffj_key_Device_Didsha1 = []byte("didsha1")

var ffj_key_Device_Didmd5 = []byte("didmd5")

var ffj_key_Device_Dpidsha1 = []byte("dpidsha1")

var ffj_key_Device_Dpidmd5 = []byte("dpidmd5")

var ffj_key_Device_Macsha1 = []byte("macsha1")

var ffj_key_Device_Macmd5 = []byte("macmd5")

var ffj_key_Device_Ipv6 = []byte("ipv6")

var ffj_key_Device_Carrier = []byte("carrier")

var ffj_key_Device_Language = []byte("language")

var ffj_key_Device_Make = []byte("make")

var ffj_key_Device_Model = []byte("model")

var ffj_key_Device_Os = []byte("os")

var ffj_key_Device_Osv = []byte("osv")

var ffj_key_Device_Js = []byte("js")

var ffj_key_Device_Connectiontype = []byte("connectiontype")

var ffj_key_Device_Devicetype = []byte("devicetype")

var ffj_key_Device_Flashver = []byte("flashver")

var ffj_key_Device_Ifa = []byte("ifa")

var ffj_key_Device_Ext = []byte("ext")

func (uj *Device) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return uj.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

func (uj *Device) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error = nil
	currentKey := ffj_t_Devicebase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffj_t_Deviceno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'c':

					if bytes.Equal(ffj_key_Device_Carrier, kn) {
						currentKey = ffj_t_Device_Carrier
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Device_Connectiontype, kn) {
						currentKey = ffj_t_Device_Connectiontype
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'd':

					if bytes.Equal(ffj_key_Device_Dnt, kn) {
						currentKey = ffj_t_Device_Dnt
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Device_Didsha1, kn) {
						currentKey = ffj_t_Device_Didsha1
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Device_Didmd5, kn) {
						currentKey = ffj_t_Device_Didmd5
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Device_Dpidsha1, kn) {
						currentKey = ffj_t_Device_Dpidsha1
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Device_Dpidmd5, kn) {
						currentKey = ffj_t_Device_Dpidmd5
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Device_Devicetype, kn) {
						currentKey = ffj_t_Device_Devicetype
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'e':

					if bytes.Equal(ffj_key_Device_Ext, kn) {
						currentKey = ffj_t_Device_Ext
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'f':

					if bytes.Equal(ffj_key_Device_Flashver, kn) {
						currentKey = ffj_t_Device_Flashver
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'g':

					if bytes.Equal(ffj_key_Device_Geo, kn) {
						currentKey = ffj_t_Device_Geo
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'i':

					if bytes.Equal(ffj_key_Device_Ip, kn) {
						currentKey = ffj_t_Device_Ip
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Device_Ipv6, kn) {
						currentKey = ffj_t_Device_Ipv6
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Device_Ifa, kn) {
						currentKey = ffj_t_Device_Ifa
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'j':

					if bytes.Equal(ffj_key_Device_Js, kn) {
						currentKey = ffj_t_Device_Js
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'l':

					if bytes.Equal(ffj_key_Device_Language, kn) {
						currentKey = ffj_t_Device_Language
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'm':

					if bytes.Equal(ffj_key_Device_Macsha1, kn) {
						currentKey = ffj_t_Device_Macsha1
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Device_Macmd5, kn) {
						currentKey = ffj_t_Device_Macmd5
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Device_Make, kn) {
						currentKey = ffj_t_Device_Make
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Device_Model, kn) {
						currentKey = ffj_t_Device_Model
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'o':

					if bytes.Equal(ffj_key_Device_Os, kn) {
						currentKey = ffj_t_Device_Os
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Device_Osv, kn) {
						currentKey = ffj_t_Device_Osv
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'u':

					if bytes.Equal(ffj_key_Device_Ua, kn) {
						currentKey = ffj_t_Device_Ua
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.SimpleLetterEqualFold(ffj_key_Device_Ext, kn) {
					currentKey = ffj_t_Device_Ext
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_Device_Ifa, kn) {
					currentKey = ffj_t_Device_Ifa
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_Device_Flashver, kn) {
					currentKey = ffj_t_Device_Flashver
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_Device_Devicetype, kn) {
					currentKey = ffj_t_Device_Devicetype
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_Device_Connectiontype, kn) {
					currentKey = ffj_t_Device_Connectiontype
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_Device_Js, kn) {
					currentKey = ffj_t_Device_Js
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_Device_Osv, kn) {
					currentKey = ffj_t_Device_Osv
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_Device_Os, kn) {
					currentKey = ffj_t_Device_Os
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_Device_Model, kn) {
					currentKey = ffj_t_Device_Model
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_Device_Make, kn) {
					currentKey = ffj_t_Device_Make
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_Device_Language, kn) {
					currentKey = ffj_t_Device_Language
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_Device_Carrier, kn) {
					currentKey = ffj_t_Device_Carrier
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_Device_Ipv6, kn) {
					currentKey = ffj_t_Device_Ipv6
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_Device_Macmd5, kn) {
					currentKey = ffj_t_Device_Macmd5
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_Device_Macsha1, kn) {
					currentKey = ffj_t_Device_Macsha1
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_Device_Dpidmd5, kn) {
					currentKey = ffj_t_Device_Dpidmd5
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_Device_Dpidsha1, kn) {
					currentKey = ffj_t_Device_Dpidsha1
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_Device_Didmd5, kn) {
					currentKey = ffj_t_Device_Didmd5
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_Device_Didsha1, kn) {
					currentKey = ffj_t_Device_Didsha1
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_Device_Geo, kn) {
					currentKey = ffj_t_Device_Geo
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_Device_Ip, kn) {
					currentKey = ffj_t_Device_Ip
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_Device_Ua, kn) {
					currentKey = ffj_t_Device_Ua
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_Device_Dnt, kn) {
					currentKey = ffj_t_Device_Dnt
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffj_t_Deviceno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffj_t_Device_Dnt:
					goto handle_Dnt

				case ffj_t_Device_Ua:
					goto handle_Ua

				case ffj_t_Device_Ip:
					goto handle_Ip

				case ffj_t_Device_Geo:
					goto handle_Geo

				case ffj_t_Device_Didsha1:
					goto handle_Didsha1

				case ffj_t_Device_Didmd5:
					goto handle_Didmd5

				case ffj_t_Device_Dpidsha1:
					goto handle_Dpidsha1

				case ffj_t_Device_Dpidmd5:
					goto handle_Dpidmd5

				case ffj_t_Device_Macsha1:
					goto handle_Macsha1

				case ffj_t_Device_Macmd5:
					goto handle_Macmd5

				case ffj_t_Device_Ipv6:
					goto handle_Ipv6

				case ffj_t_Device_Carrier:
					goto handle_Carrier

				case ffj_t_Device_Language:
					goto handle_Language

				case ffj_t_Device_Make:
					goto handle_Make

				case ffj_t_Device_Model:
					goto handle_Model

				case ffj_t_Device_Os:
					goto handle_Os

				case ffj_t_Device_Osv:
					goto handle_Osv

				case ffj_t_Device_Js:
					goto handle_Js

				case ffj_t_Device_Connectiontype:
					goto handle_Connectiontype

				case ffj_t_Device_Devicetype:
					goto handle_Devicetype

				case ffj_t_Device_Flashver:
					goto handle_Flashver

				case ffj_t_Device_Ifa:
					goto handle_Ifa

				case ffj_t_Device_Ext:
					goto handle_Ext

				case ffj_t_Deviceno_such_key:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_Dnt:

	/* handler: uj.Dnt type=int kind=int */

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

			uj.Dnt = nil

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			ttypval := int(tval)
			uj.Dnt = &ttypval

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Ua:

	/* handler: uj.Ua type=string kind=string */

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

			uj.Ua = nil

		} else {

			var tval string
			tval = string(fs.Output.String())
			uj.Ua = &tval

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Ip:

	/* handler: uj.Ip type=string kind=string */

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

			uj.Ip = nil

		} else {

			var tval string
			tval = string(fs.Output.String())
			uj.Ip = &tval

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Geo:

	/* handler: uj.Geo type=openrtb.Geo kind=struct */

	{
		/* Falling back. type=openrtb.Geo kind=struct */
		tbuf, err := fs.CaptureField(tok)
		if err != nil {
			return fs.WrapErr(err)
		}

		err = json.Unmarshal(tbuf, &uj.Geo)
		if err != nil {
			return fs.WrapErr(err)
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Didsha1:

	/* handler: uj.Didsha1 type=string kind=string */

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

			uj.Didsha1 = nil

		} else {

			var tval string
			tval = string(fs.Output.String())
			uj.Didsha1 = &tval

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Didmd5:

	/* handler: uj.Didmd5 type=string kind=string */

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

			uj.Didmd5 = nil

		} else {

			var tval string
			tval = string(fs.Output.String())
			uj.Didmd5 = &tval

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Dpidsha1:

	/* handler: uj.Dpidsha1 type=string kind=string */

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

			uj.Dpidsha1 = nil

		} else {

			var tval string
			tval = string(fs.Output.String())
			uj.Dpidsha1 = &tval

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Dpidmd5:

	/* handler: uj.Dpidmd5 type=string kind=string */

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

			uj.Dpidmd5 = nil

		} else {

			var tval string
			tval = string(fs.Output.String())
			uj.Dpidmd5 = &tval

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Macsha1:

	/* handler: uj.Macsha1 type=string kind=string */

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

			uj.Macsha1 = nil

		} else {

			var tval string
			tval = string(fs.Output.String())
			uj.Macsha1 = &tval

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Macmd5:

	/* handler: uj.Macmd5 type=string kind=string */

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

			uj.Macmd5 = nil

		} else {

			var tval string
			tval = string(fs.Output.String())
			uj.Macmd5 = &tval

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Ipv6:

	/* handler: uj.Ipv6 type=string kind=string */

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

			uj.Ipv6 = nil

		} else {

			var tval string
			tval = string(fs.Output.String())
			uj.Ipv6 = &tval

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Carrier:

	/* handler: uj.Carrier type=string kind=string */

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

			uj.Carrier = nil

		} else {

			var tval string
			tval = string(fs.Output.String())
			uj.Carrier = &tval

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Language:

	/* handler: uj.Language type=string kind=string */

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

			uj.Language = nil

		} else {

			var tval string
			tval = string(fs.Output.String())
			uj.Language = &tval

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Make:

	/* handler: uj.Make type=string kind=string */

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

			uj.Make = nil

		} else {

			var tval string
			tval = string(fs.Output.String())
			uj.Make = &tval

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Model:

	/* handler: uj.Model type=string kind=string */

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

			uj.Model = nil

		} else {

			var tval string
			tval = string(fs.Output.String())
			uj.Model = &tval

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Os:

	/* handler: uj.Os type=string kind=string */

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

			uj.Os = nil

		} else {

			var tval string
			tval = string(fs.Output.String())
			uj.Os = &tval

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Osv:

	/* handler: uj.Osv type=string kind=string */

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

			uj.Osv = nil

		} else {

			var tval string
			tval = string(fs.Output.String())
			uj.Osv = &tval

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Js:

	/* handler: uj.Js type=int kind=int */

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

			uj.Js = nil

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			ttypval := int(tval)
			uj.Js = &ttypval

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Connectiontype:

	/* handler: uj.Connectiontype type=int kind=int */

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

			uj.Connectiontype = nil

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			ttypval := int(tval)
			uj.Connectiontype = &ttypval

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Devicetype:

	/* handler: uj.Devicetype type=int kind=int */

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

			uj.Devicetype = nil

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			ttypval := int(tval)
			uj.Devicetype = &ttypval

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Flashver:

	/* handler: uj.Flashver type=string kind=string */

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

			uj.Flashver = nil

		} else {

			var tval string
			tval = string(fs.Output.String())
			uj.Flashver = &tval

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Ifa:

	/* handler: uj.Ifa type=string kind=string */

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

			uj.Ifa = nil

		} else {

			var tval string
			tval = string(fs.Output.String())
			uj.Ifa = &tval

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Ext:

	/* handler: uj.Ext type=openrtb.Extensions kind=map */

	{
		/* Falling back. type=openrtb.Extensions kind=map */
		tbuf, err := fs.CaptureField(tok)
		if err != nil {
			return fs.WrapErr(err)
		}

		err = json.Unmarshal(tbuf, &uj.Ext)
		if err != nil {
			return fs.WrapErr(err)
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:
	return nil
}
