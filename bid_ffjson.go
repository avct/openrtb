// DO NOT EDIT!
// Code generated by ffjson <https://github.com/pquerna/ffjson>
// source: bid.go
// DO NOT EDIT!

package openrtb

import (
	"bytes"
	"encoding/json"
	"fmt"
	fflib "github.com/pquerna/ffjson/fflib/v1"
)

func (mj *Bid) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	err := mj.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}
func (mj *Bid) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	var err error
	var obj []byte
	_ = obj
	_ = err
	if mj.Id != nil {
		buf.WriteString(`{ "id":`)
		fflib.WriteJsonString(buf, string(*mj.Id))
	} else {
		buf.WriteString(`{ "id":null`)
	}
	if mj.Impid != nil {
		buf.WriteString(`,"impid":`)
		fflib.WriteJsonString(buf, string(*mj.Impid))
	} else {
		buf.WriteString(`,"impid":null`)
	}
	if mj.Price != nil {
		buf.WriteString(`,"price":`)
		fflib.AppendFloat(buf, float64(*mj.Price), 'g', -1, 32)
	} else {
		buf.WriteString(`,"price":null`)
	}
	buf.WriteByte(',')
	if mj.Adid != nil {
		if true {
			buf.WriteString(`"adid":`)
			fflib.WriteJsonString(buf, string(*mj.Adid))
			buf.WriteByte(',')
		}
	}
	if mj.Nurl != nil {
		if true {
			buf.WriteString(`"nurl":`)
			fflib.WriteJsonString(buf, string(*mj.Nurl))
			buf.WriteByte(',')
		}
	}
	if mj.Adm != nil {
		if true {
			buf.WriteString(`"adm":`)
			fflib.WriteJsonString(buf, string(*mj.Adm))
			buf.WriteByte(',')
		}
	}
	if len(mj.Adomain) != 0 {
		buf.WriteString(`"adomain":`)
		if mj.Adomain != nil {
			buf.WriteString(`[`)
			for i, v := range mj.Adomain {
				if i != 0 {
					buf.WriteString(`,`)
				}
				fflib.WriteJsonString(buf, string(v))
			}
			buf.WriteString(`]`)
		} else {
			buf.WriteString(`null`)
		}
		buf.WriteByte(',')
	}
	if mj.Iurl != nil {
		if true {
			buf.WriteString(`"iurl":`)
			fflib.WriteJsonString(buf, string(*mj.Iurl))
			buf.WriteByte(',')
		}
	}
	if mj.Cid != nil {
		if true {
			buf.WriteString(`"cid":`)
			fflib.WriteJsonString(buf, string(*mj.Cid))
			buf.WriteByte(',')
		}
	}
	if mj.Crid != nil {
		if true {
			buf.WriteString(`"crid":`)
			fflib.WriteJsonString(buf, string(*mj.Crid))
			buf.WriteByte(',')
		}
	}
	if len(mj.Attr) != 0 {
		buf.WriteString(`"attr":`)
		if mj.Attr != nil {
			buf.WriteString(`[`)
			for i, v := range mj.Attr {
				if i != 0 {
					buf.WriteString(`,`)
				}
				fflib.FormatBits2(buf, uint64(v), 10, v < 0)
			}
			buf.WriteString(`]`)
		} else {
			buf.WriteString(`null`)
		}
		buf.WriteByte(',')
	}
	if mj.DealId != nil {
		if true {
			buf.WriteString(`"deal_id":`)
			fflib.WriteJsonString(buf, string(*mj.DealId))
			buf.WriteByte(',')
		}
	}
	if len(mj.Ext) != 0 {
		buf.WriteString(`"ext":`)
		/* Falling back. type=openrtb.Extensions kind=map */
		err = buf.Encode(mj.Ext)
		if err != nil {
			return err
		}
		buf.WriteByte(',')
	}
	buf.Rewind(1)
	buf.WriteByte('}')
	return nil
}

const (
	ffj_t_Bidbase = iota
	ffj_t_Bidno_such_key

	ffj_t_Bid_Id

	ffj_t_Bid_Impid

	ffj_t_Bid_Price

	ffj_t_Bid_Adid

	ffj_t_Bid_Nurl

	ffj_t_Bid_Adm

	ffj_t_Bid_Adomain

	ffj_t_Bid_Iurl

	ffj_t_Bid_Cid

	ffj_t_Bid_Crid

	ffj_t_Bid_Attr

	ffj_t_Bid_DealId

	ffj_t_Bid_Ext
)

var ffj_key_Bid_Id = []byte("id")

var ffj_key_Bid_Impid = []byte("impid")

var ffj_key_Bid_Price = []byte("price")

var ffj_key_Bid_Adid = []byte("adid")

var ffj_key_Bid_Nurl = []byte("nurl")

var ffj_key_Bid_Adm = []byte("adm")

var ffj_key_Bid_Adomain = []byte("adomain")

var ffj_key_Bid_Iurl = []byte("iurl")

var ffj_key_Bid_Cid = []byte("cid")

var ffj_key_Bid_Crid = []byte("crid")

var ffj_key_Bid_Attr = []byte("attr")

var ffj_key_Bid_DealId = []byte("deal_id")

var ffj_key_Bid_Ext = []byte("ext")

func (uj *Bid) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return uj.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

func (uj *Bid) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error = nil
	currentKey := ffj_t_Bidbase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffj_t_Bidno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'a':

					if bytes.Equal(ffj_key_Bid_Adid, kn) {
						currentKey = ffj_t_Bid_Adid
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Bid_Adm, kn) {
						currentKey = ffj_t_Bid_Adm
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Bid_Adomain, kn) {
						currentKey = ffj_t_Bid_Adomain
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Bid_Attr, kn) {
						currentKey = ffj_t_Bid_Attr
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'c':

					if bytes.Equal(ffj_key_Bid_Cid, kn) {
						currentKey = ffj_t_Bid_Cid
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Bid_Crid, kn) {
						currentKey = ffj_t_Bid_Crid
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'd':

					if bytes.Equal(ffj_key_Bid_DealId, kn) {
						currentKey = ffj_t_Bid_DealId
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'e':

					if bytes.Equal(ffj_key_Bid_Ext, kn) {
						currentKey = ffj_t_Bid_Ext
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'i':

					if bytes.Equal(ffj_key_Bid_Id, kn) {
						currentKey = ffj_t_Bid_Id
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Bid_Impid, kn) {
						currentKey = ffj_t_Bid_Impid
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Bid_Iurl, kn) {
						currentKey = ffj_t_Bid_Iurl
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'n':

					if bytes.Equal(ffj_key_Bid_Nurl, kn) {
						currentKey = ffj_t_Bid_Nurl
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'p':

					if bytes.Equal(ffj_key_Bid_Price, kn) {
						currentKey = ffj_t_Bid_Price
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.SimpleLetterEqualFold(ffj_key_Bid_Ext, kn) {
					currentKey = ffj_t_Bid_Ext
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_Bid_DealId, kn) {
					currentKey = ffj_t_Bid_DealId
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_Bid_Attr, kn) {
					currentKey = ffj_t_Bid_Attr
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_Bid_Crid, kn) {
					currentKey = ffj_t_Bid_Crid
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_Bid_Cid, kn) {
					currentKey = ffj_t_Bid_Cid
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_Bid_Iurl, kn) {
					currentKey = ffj_t_Bid_Iurl
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_Bid_Adomain, kn) {
					currentKey = ffj_t_Bid_Adomain
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_Bid_Adm, kn) {
					currentKey = ffj_t_Bid_Adm
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_Bid_Nurl, kn) {
					currentKey = ffj_t_Bid_Nurl
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_Bid_Adid, kn) {
					currentKey = ffj_t_Bid_Adid
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_Bid_Price, kn) {
					currentKey = ffj_t_Bid_Price
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_Bid_Impid, kn) {
					currentKey = ffj_t_Bid_Impid
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_Bid_Id, kn) {
					currentKey = ffj_t_Bid_Id
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffj_t_Bidno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffj_t_Bid_Id:
					goto handle_Id

				case ffj_t_Bid_Impid:
					goto handle_Impid

				case ffj_t_Bid_Price:
					goto handle_Price

				case ffj_t_Bid_Adid:
					goto handle_Adid

				case ffj_t_Bid_Nurl:
					goto handle_Nurl

				case ffj_t_Bid_Adm:
					goto handle_Adm

				case ffj_t_Bid_Adomain:
					goto handle_Adomain

				case ffj_t_Bid_Iurl:
					goto handle_Iurl

				case ffj_t_Bid_Cid:
					goto handle_Cid

				case ffj_t_Bid_Crid:
					goto handle_Crid

				case ffj_t_Bid_Attr:
					goto handle_Attr

				case ffj_t_Bid_DealId:
					goto handle_DealId

				case ffj_t_Bid_Ext:
					goto handle_Ext

				case ffj_t_Bidno_such_key:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_Id:

	/* handler: uj.Id type=string kind=string */

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

			uj.Id = nil

		} else {

			var tval string
			tval = string(fs.Output.String())
			uj.Id = &tval

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Impid:

	/* handler: uj.Impid type=string kind=string */

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

			uj.Impid = nil

		} else {

			var tval string
			tval = string(fs.Output.String())
			uj.Impid = &tval

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Price:

	/* handler: uj.Price type=float32 kind=float32 */

	{
		if tok != fflib.FFTok_double && tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for float32", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

			uj.Price = nil

		} else {

			tval, err := fflib.ParseFloat(fs.Output.Bytes(), 32)

			if err != nil {
				return fs.WrapErr(err)
			}

			ttypval := float32(tval)
			uj.Price = &ttypval

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Adid:

	/* handler: uj.Adid type=string kind=string */

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

			uj.Adid = nil

		} else {

			var tval string
			tval = string(fs.Output.String())
			uj.Adid = &tval

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Nurl:

	/* handler: uj.Nurl type=string kind=string */

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

			uj.Nurl = nil

		} else {

			var tval string
			tval = string(fs.Output.String())
			uj.Nurl = &tval

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Adm:

	/* handler: uj.Adm type=string kind=string */

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

			uj.Adm = nil

		} else {

			var tval string
			tval = string(fs.Output.String())
			uj.Adm = &tval

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Adomain:

	/* handler: uj.Adomain type=[]string kind=slice */

	{

		{
			if tok != fflib.FFTok_left_brace && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for ", tok))
			}
		}

		if tok == fflib.FFTok_null {
			uj.Adomain = nil
		} else {

			uj.Adomain = make([]string, 0)

			wantVal := true

			for {

				var v string

				tok = fs.Scan()
				if tok == fflib.FFTok_error {
					goto tokerror
				}
				if tok == fflib.FFTok_right_brace {
					break
				}

				if tok == fflib.FFTok_comma {
					if wantVal == true {
						// TODO(pquerna): this isn't an ideal error message, this handles
						// things like [,,,] as an array value.
						return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
					}
					continue
				} else {
					wantVal = true
				}

				/* handler: v type=string kind=string */

				{

					{
						if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
							return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
						}
					}

					if tok == fflib.FFTok_null {

					} else {

						v = string(fs.Output.String())

					}
				}

				uj.Adomain = append(uj.Adomain, v)
				wantVal = false
			}
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Iurl:

	/* handler: uj.Iurl type=string kind=string */

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

			uj.Iurl = nil

		} else {

			var tval string
			tval = string(fs.Output.String())
			uj.Iurl = &tval

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Cid:

	/* handler: uj.Cid type=string kind=string */

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

			uj.Cid = nil

		} else {

			var tval string
			tval = string(fs.Output.String())
			uj.Cid = &tval

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Crid:

	/* handler: uj.Crid type=string kind=string */

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

			uj.Crid = nil

		} else {

			var tval string
			tval = string(fs.Output.String())
			uj.Crid = &tval

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Attr:

	/* handler: uj.Attr type=[]int kind=slice */

	{

		{
			if tok != fflib.FFTok_left_brace && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for ", tok))
			}
		}

		if tok == fflib.FFTok_null {
			uj.Attr = nil
		} else {

			uj.Attr = make([]int, 0)

			wantVal := true

			for {

				var v int

				tok = fs.Scan()
				if tok == fflib.FFTok_error {
					goto tokerror
				}
				if tok == fflib.FFTok_right_brace {
					break
				}

				if tok == fflib.FFTok_comma {
					if wantVal == true {
						// TODO(pquerna): this isn't an ideal error message, this handles
						// things like [,,,] as an array value.
						return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
					}
					continue
				} else {
					wantVal = true
				}

				/* handler: v type=int kind=int */

				{
					if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
						return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
					}
				}

				{

					if tok == fflib.FFTok_null {

					} else {

						tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

						if err != nil {
							return fs.WrapErr(err)
						}

						v = int(tval)

					}
				}

				uj.Attr = append(uj.Attr, v)
				wantVal = false
			}
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_DealId:

	/* handler: uj.DealId type=string kind=string */

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

			uj.DealId = nil

		} else {

			var tval string
			tval = string(fs.Output.String())
			uj.DealId = &tval

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Ext:

	/* handler: uj.Ext type=openrtb.Extensions kind=map */

	{
		/* Falling back. type=openrtb.Extensions kind=map */
		tbuf, err := fs.CaptureField(tok)
		if err != nil {
			return fs.WrapErr(err)
		}

		err = json.Unmarshal(tbuf, &uj.Ext)
		if err != nil {
			return fs.WrapErr(err)
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:
	return nil
}
