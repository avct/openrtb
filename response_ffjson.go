// DO NOT EDIT!
// Code generated by ffjson <https://github.com/pquerna/ffjson>
// source: response.go
// DO NOT EDIT!

package openrtb

import (
	"bytes"
	"encoding/json"
	"fmt"
	fflib "github.com/pquerna/ffjson/fflib/v1"
)

func (mj *Response) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	err := mj.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}
func (mj *Response) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	var err error
	var obj []byte
	_ = obj
	_ = err
	if mj.Id != nil {
		buf.WriteString(`{ "id":`)
		fflib.WriteJsonString(buf, string(*mj.Id))
	} else {
		buf.WriteString(`{ "id":null`)
	}
	buf.WriteString(`,"seatbid":`)
	if mj.Seatbid != nil {
		buf.WriteString(`[`)
		for i, v := range mj.Seatbid {
			if i != 0 {
				buf.WriteString(`,`)
			}
			/* Struct fall back. type=openrtb.Seatbid kind=struct */
			err = buf.Encode(&v)
			if err != nil {
				return err
			}
		}
		buf.WriteString(`]`)
	} else {
		buf.WriteString(`null`)
	}
	buf.WriteByte(',')
	if mj.Bidid != nil {
		if true {
			buf.WriteString(`"bidid":`)
			fflib.WriteJsonString(buf, string(*mj.Bidid))
			buf.WriteByte(',')
		}
	}
	if mj.Cur != nil {
		if true {
			buf.WriteString(`"cur":`)
			fflib.WriteJsonString(buf, string(*mj.Cur))
			buf.WriteByte(',')
		}
	}
	if mj.Customdata != nil {
		if true {
			buf.WriteString(`"customdata":`)
			fflib.WriteJsonString(buf, string(*mj.Customdata))
			buf.WriteByte(',')
		}
	}
	if len(mj.Ext) != 0 {
		buf.WriteString(`"ext":`)
		/* Falling back. type=openrtb.Extensions kind=map */
		err = buf.Encode(mj.Ext)
		if err != nil {
			return err
		}
		buf.WriteByte(',')
	}
	buf.Rewind(1)
	buf.WriteByte('}')
	return nil
}

const (
	ffj_t_Responsebase = iota
	ffj_t_Responseno_such_key

	ffj_t_Response_Id

	ffj_t_Response_Seatbid

	ffj_t_Response_Bidid

	ffj_t_Response_Cur

	ffj_t_Response_Customdata

	ffj_t_Response_Ext
)

var ffj_key_Response_Id = []byte("id")

var ffj_key_Response_Seatbid = []byte("seatbid")

var ffj_key_Response_Bidid = []byte("bidid")

var ffj_key_Response_Cur = []byte("cur")

var ffj_key_Response_Customdata = []byte("customdata")

var ffj_key_Response_Ext = []byte("ext")

func (uj *Response) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return uj.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

func (uj *Response) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error = nil
	currentKey := ffj_t_Responsebase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffj_t_Responseno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'b':

					if bytes.Equal(ffj_key_Response_Bidid, kn) {
						currentKey = ffj_t_Response_Bidid
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'c':

					if bytes.Equal(ffj_key_Response_Cur, kn) {
						currentKey = ffj_t_Response_Cur
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Response_Customdata, kn) {
						currentKey = ffj_t_Response_Customdata
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'e':

					if bytes.Equal(ffj_key_Response_Ext, kn) {
						currentKey = ffj_t_Response_Ext
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'i':

					if bytes.Equal(ffj_key_Response_Id, kn) {
						currentKey = ffj_t_Response_Id
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 's':

					if bytes.Equal(ffj_key_Response_Seatbid, kn) {
						currentKey = ffj_t_Response_Seatbid
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.SimpleLetterEqualFold(ffj_key_Response_Ext, kn) {
					currentKey = ffj_t_Response_Ext
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_Response_Customdata, kn) {
					currentKey = ffj_t_Response_Customdata
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_Response_Cur, kn) {
					currentKey = ffj_t_Response_Cur
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_Response_Bidid, kn) {
					currentKey = ffj_t_Response_Bidid
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_Response_Seatbid, kn) {
					currentKey = ffj_t_Response_Seatbid
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_Response_Id, kn) {
					currentKey = ffj_t_Response_Id
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffj_t_Responseno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffj_t_Response_Id:
					goto handle_Id

				case ffj_t_Response_Seatbid:
					goto handle_Seatbid

				case ffj_t_Response_Bidid:
					goto handle_Bidid

				case ffj_t_Response_Cur:
					goto handle_Cur

				case ffj_t_Response_Customdata:
					goto handle_Customdata

				case ffj_t_Response_Ext:
					goto handle_Ext

				case ffj_t_Responseno_such_key:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_Id:

	/* handler: uj.Id type=string kind=string */

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

			uj.Id = nil

		} else {

			var tval string
			tval = string(fs.Output.String())
			uj.Id = &tval

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Seatbid:

	/* handler: uj.Seatbid type=[]openrtb.Seatbid kind=slice */

	{
		/* Falling back. type=[]openrtb.Seatbid kind=slice */
		tbuf, err := fs.CaptureField(tok)
		if err != nil {
			return fs.WrapErr(err)
		}

		err = json.Unmarshal(tbuf, &uj.Seatbid)
		if err != nil {
			return fs.WrapErr(err)
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Bidid:

	/* handler: uj.Bidid type=string kind=string */

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

			uj.Bidid = nil

		} else {

			var tval string
			tval = string(fs.Output.String())
			uj.Bidid = &tval

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Cur:

	/* handler: uj.Cur type=string kind=string */

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

			uj.Cur = nil

		} else {

			var tval string
			tval = string(fs.Output.String())
			uj.Cur = &tval

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Customdata:

	/* handler: uj.Customdata type=string kind=string */

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

			uj.Customdata = nil

		} else {

			var tval string
			tval = string(fs.Output.String())
			uj.Customdata = &tval

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Ext:

	/* handler: uj.Ext type=openrtb.Extensions kind=map */

	{
		/* Falling back. type=openrtb.Extensions kind=map */
		tbuf, err := fs.CaptureField(tok)
		if err != nil {
			return fs.WrapErr(err)
		}

		err = json.Unmarshal(tbuf, &uj.Ext)
		if err != nil {
			return fs.WrapErr(err)
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:
	return nil
}
